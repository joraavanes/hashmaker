{"version":3,"sources":["components/Home.js","state/actions/cryptoActions.js","components/Hash.js","components/Pbkdf2.js","components/Encrypt.js","components/Decrypt.js","components/UI/ElevateAppBar.js","state/reducers/cryptoReducer.js","state/reducers/indexReducer.js","state/store/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","styles","smPadding","padding","mdPadding","mt","marginTop","colorWhite","color","Home","Grid","container","spacing","justify","className","item","xs","md","xl","Paper","Typography","variant","component","align","gutterBottom","Button","NavLink","to","toggleLoader","loading","type","selectMinWidth","minWidth","cryptoSelector","state","crypto","Hash","useState","str","setStr","algorithm","setAlgorithm","useSelector","dispatch","useDispatch","useEffect","sm","noValidate","autoComplete","onSubmit","e","preventDefault","getState","axios","post","then","res","data","hash","plainText","hmac","catch","err","createHMAC","TextField","id","label","fullWidth","value","onChange","target","FormControl","InputLabel","htmlFor","Select","labelId","MenuItem","defaultValue","disabled","multiline","rows","Pbkdf2","plainPassword","setPlainPassword","iterations","setIterations","keylen","setKeylen","password","a","pbkdf2Password","salt","pbkdf2","Number","mt1","mt2","Encrypt","setData","dataError","setDataError","keyPassword","setKeyPassword","keyError","setKeyError","length","encryptedData","key","iv","encrypt","error","Decrypt","setEncryptedData","setKey","setIv","decryptedData","decrypt","theme","whiteFont","ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","undefined","React","cloneElement","elevation","ElevateAppBar","Fragment","CssBaseline","AppBar","Toolbar","cryptoDefaultState","combineReducers","action","middlewares","thunk","composedEnhancer","composeWithDevTools","applyMiddleware","createStore","rootReducer","customTheme","createMuiTheme","palette","primary","lightBlue","text","typography","fontFamily","alignCenter","display","flexDirection","justifyContent","App","classes","store","ThemeProvider","Container","ButtonGroup","startIcon","fontSize","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0QAOMA,EAAYC,aAAW,SAAAC,GAAM,MAAK,CACpCC,UAAU,CACNC,QAAQ,QAEZC,UAAU,CACND,QAAQ,QAEZE,GAAI,CACAC,UAAW,QAEfC,WAAW,CACPC,MAAO,YA+BAC,EA3BF,WACT,MAA+CV,IAA7BK,GAAlB,EAAOF,UAAP,EAAkBE,WAAWC,EAA7B,EAA6BA,GAAIE,EAAjC,EAAiCA,WAEjC,OACI,cAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,UAAWT,EAAxD,SACI,cAACK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAA9B,SACI,eAACC,EAAA,EAAD,CAAOL,UAAWV,EAAlB,UACI,cAACgB,EAAA,EAAD,CACIC,QAAQ,KACRC,UAAU,KACVC,MAAM,SACNT,UAAWV,EACXoB,cAAY,EALhB,kBAQA,cAACJ,EAAA,EAAD,ioBAKA,cAACK,EAAA,EAAD,CAAQjB,MAAM,UAAUa,QAAQ,YAAYP,UAAS,UAAKT,EAAL,YAAWE,GAAce,UAAWI,IAASC,GAAI,QAAtG,oC,uGC+Db,SAASC,EAAaC,GACzB,MAAO,CACHC,KAAM,UACND,WCvGR,IAAM9B,EAAYC,aAAW,SAAAC,GAAM,MAAK,CACpCC,UAAU,CACNC,QAAQ,QAEZC,UAAU,CACND,QAAQ,QAEZE,GAAI,CACAC,UAAW,QAEfC,WAAW,CACPC,MAAO,QAEXuB,eAAe,CACXC,SAAU,SAIZC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAmHvBC,EAjHF,WACT,MAAoDrC,IAA7CK,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,GAAIE,EAAtB,EAAsBA,WAAYwB,EAAlC,EAAkCA,eAGlC,EAAsBM,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,mBAAS,QAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAGMN,EAASO,YAAYT,GAGrBU,EAAWC,cAoBjB,OATAC,qBACI,WAEI,OAAO,WACHF,EDiDL,CACHb,KAAM,iBC/CT,IAGG,cAACpB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,UAAWT,EAAxD,SACI,cAACK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,eAACC,EAAA,EAAD,CAAOL,UAAWV,EAAlB,UACI,cAACgB,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,KAAKP,UAAWV,EAAWmB,MAAM,SAApE,kBAGA,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,SACA,uBAAMC,YAAU,EAACC,aAAa,MAAMC,SAxB/B,SAAAC,GACrBA,EAAEC,iBAEFR,EDxCD,SAAqBL,EAAKE,GAC7B,OAAO,SAASG,EAAUS,GACtBT,EAASf,GAAa,IAEtByB,IAAMC,KAAN,UAN2C,GAM3C,SAA0B,CAAChB,MAAKE,cAC3Be,MAAK,SAAAC,GACF,MAAqCA,EAAIC,KAAlCC,EAAP,EAAOA,KAAMlB,EAAb,EAAaA,UAAWmB,EAAxB,EAAwBA,UACxBhB,EAAS,CACLb,KAAM,OACN8B,KAAK,CACDF,OACAlB,YACAmB,eAGRhB,EAASf,GAAa,OAEzBiC,OAAM,SAAAC,GAEHnB,EAASf,GAAa,QCqBrBmC,CAAWzB,EAAKE,KAqBT,UACI,8BACI,cAACwB,EAAA,EAAD,CACIC,GAAG,MACHC,MAAM,aACNC,WAAS,EACTC,MAAO9B,EACP+B,SAlCN,SAAAnB,GAAC,OAAIX,EAAOW,EAAEoB,OAAOF,YAqCvB,eAACG,EAAA,EAAD,CAAazD,UAAWT,EAAxB,UACI,cAACmE,EAAA,EAAD,CAAYC,QAAQ,YAApB,uBACA,eAACC,EAAA,EAAD,CACIT,GAAG,YACHU,QAAQ,YACRT,MAAM,YACNC,WAAS,EACTrD,UAAWiB,EACXqC,MAAO5B,EACP6B,SA7CD,SAAAnB,GAAC,OAAIT,EAAaS,EAAEoB,OAAOF,QAsC9B,UASI,cAACQ,EAAA,EAAD,CAAUR,MAAM,OAAhB,kBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,oBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,oBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,0BAIR,8BACI,cAAC3C,EAAA,EAAD,CAAQK,KAAK,SAAStB,MAAM,UAAUa,QAAQ,YAAYP,UAAS,UAAKT,EAAL,YAAWE,GAA9E,kCAIR,eAACG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,UACI,cAACkB,EAAA,EAAD,CACIE,MAAM,aACNW,aAAa,aACbT,MAAOjC,EAAOyB,MAAQzB,EAAOyB,KAAKD,UAClCtC,QAAQ,WACR8C,WAAS,EACTW,UAAQ,EACRC,WAAS,EACTC,KAAM,IAEV,cAAChB,EAAA,EAAD,CACIE,MAAM,YACNW,aAAa,YACbxD,QAAQ,WACR+C,MAAOjC,EAAOyB,MAAQzB,EAAOyB,KAAKpB,UAClC1B,UAAWT,EACXyE,UAAQ,IAEZ,cAACd,EAAA,EAAD,CACIc,UAAQ,EACRb,GAAG,oBACHC,MAAM,SACNW,aAAa,gBACbxD,QAAQ,WACR+C,MAAOjC,EAAOyB,MAAQzB,EAAOyB,KAAKF,KAClCS,WAAS,EACTY,WAAS,EACTC,KAAM,GACNlE,UAAWT,kBC1HrCN,EAAYC,aAAW,SAAAC,GAAM,MAAK,CACpCC,UAAU,CACNC,QAAQ,QAEZC,UAAU,CACND,QAAQ,QAEZE,GAAI,CACAC,UAAW,QAEfC,WAAW,CACPC,MAAO,QAEXuB,eAAe,CACXC,SAAU,SAIZC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QA0GvB8C,EAxGA,WACX,MAA+DlF,IAAxDM,EAAP,EAAOA,GAAeD,GAAtB,EAAWF,UAAX,EAAsBE,WAAW2B,EAAjC,EAAiCA,eAAgBxB,EAAjD,EAAiDA,WAE3CoC,EAAWC,cAEjB,EAA0CP,mBAAS,IAAnD,mBAAO6C,EAAP,KAAsBC,EAAtB,KACA,EAAoC9C,mBAAS,GAA7C,mBAAO+C,EAAP,KAAmBC,EAAnB,KACA,EAA4BhD,mBAAS,GAArC,mBAAOiD,EAAP,KAAeC,EAAf,KACA,EAAkClD,mBAAS,QAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMN,EAASO,YAAYT,GAE3BY,qBAAU,WAEN,OAAO,WACHF,EF4DD,CACHb,KAAM,iBE3DP,IAQH,OACI,cAACpB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,UAAWT,EAAxD,SACI,cAACK,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,GAAI5B,GAAI,GAA/B,SACI,eAACC,EAAA,EAAD,CAAOL,UAAWV,EAAlB,UACI,cAACgB,EAAA,EAAD,CACIE,UAAU,KACVD,QAAQ,KACRE,MAAM,SACNC,cAAY,EACZV,UAAWV,EALf,yDASA,eAACM,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,SACI,uBAAME,aAAa,MAAMC,SArBxB,SAAAC,GACrBA,EAAEC,iBAEFR,EFnBD,SAAgB6C,EAAUJ,EAAYE,EAAQ9C,GACjD,8CAAO,WAAeG,EAAUS,GAAzB,qBAAAqC,EAAA,6DACH9C,EAASf,GAAa,IADnB,kBAImByB,IAAMC,KAAN,UA/BqB,GA+BrB,WAA4B,CAACkC,WAAUJ,aAAYE,SAAQ9C,cAJ9E,OAIOgB,EAJP,SAKgCA,EAAIC,KAA5BiC,EALR,EAKQA,eAAgBC,EALxB,EAKwBA,KACvBhD,EAAS,CACLb,KAAM,SACN8D,OAAO,CACHF,iBACAC,UAIRhD,EAASf,GAAa,IAdvB,kDAgBCe,EAASf,GAAa,IAhBvB,0DAAP,wDEkBagE,CAAOV,EAAeE,EAAYE,EAAQ9C,KAkBsBO,YAAU,EAA/D,UACI,8BACI,cAACiB,EAAA,EAAD,CAAWC,GAAG,WAAWC,MAAM,iBAAiBC,WAAS,EAACE,SAAU,SAAAnB,GAAC,OAAGiC,EAAiBjC,EAAEoB,OAAOF,QAAQA,MAAOc,MAErH,8BACI,cAAClB,EAAA,EAAD,CAAWlC,KAAK,SAASmC,GAAG,aAAaC,MAAM,aAAaC,WAAS,EAACE,SAAU,SAAAnB,GAAC,OAAImC,EAAcQ,OAAO3C,EAAEoB,OAAOF,SAASA,MAAOgB,MAEvI,8BACI,cAACpB,EAAA,EAAD,CAAWlC,KAAK,SAASmC,GAAG,SAASC,MAAM,SAASC,WAAS,EAACE,SAAU,SAAAnB,GAAC,OAAIqC,EAAUM,OAAO3C,EAAEoB,OAAOF,SAASA,MAAOkB,MAE3H,8BACI,eAACf,EAAA,EAAD,CAAazD,UAAWT,EAAxB,UACI,cAACmE,EAAA,EAAD,CAAYP,GAAG,YAAf,uBACA,eAACS,EAAA,EAAD,CACIT,GAAG,MACHU,QAAQ,YACRT,MAAM,YACNC,WAAS,EACTrD,UAAWiB,EACXqC,MAAO5B,EACP6B,SAAU,SAAAnB,GAAC,OAAIT,EAAaS,EAAEoB,OAAOF,QAPzC,UASI,cAACQ,EAAA,EAAD,CAAUR,MAAM,OAAhB,kBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,oBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,oBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,SAAhB,4BAIZ,8BACI,cAAC3C,EAAA,EAAD,CAAQK,KAAK,SAAStB,MAAM,UAAUa,QAAQ,YAAYP,UAAS,UAAKT,EAAL,YAAWE,GAA9E,oCAIZ,eAACG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,UACI,cAACkB,EAAA,EAAD,CACIc,UAAQ,EACRzD,QAAQ,WACR6C,MAAM,OACNW,aAAa,OACbV,WAAS,EACTY,WAAS,EACTC,KAAM,EACNZ,MAAOjC,EAAOyD,OAAOD,OAEzB,cAAC3B,EAAA,EAAD,CACIlD,UAAWT,EACXyE,UAAQ,EACRZ,MAAM,gBACNW,aAAa,gBACbxD,QAAQ,WACR+C,MAAOjC,EAAOyD,OAAOF,eACrBX,WAAS,EACTZ,WAAS,EACTa,KAAM,mBClHhCjF,EAAYC,aAAW,SAAAC,GAAM,MAAK,CACpC6F,IAAI,CACAxF,UAAWL,EAAOW,QAAQ,IAE9BmF,IAAI,CACAzF,UAAWL,EAAOW,QAAQ,IAE9BV,UAAU,CACNC,QAASF,EAAOW,QAAQ,IAE5BL,WAAW,CACPC,MAAO,YA6IAwF,EAzIC,WACZ,MAA0CjG,IAAnC+F,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,IAAK7F,EAAjB,EAAiBA,UAAWK,EAA5B,EAA4BA,WAEtBoC,EAAWC,cAEjB,EAAwBP,mBAAS,IAAjC,mBAAOoB,EAAP,KAAawC,EAAb,KACA,EAAkC5D,oBAAS,GAA3C,mBAAO6D,EAAP,KAAkBC,EAAlB,KACA,EAAsC9D,mBAAS,IAA/C,mBAAO+D,EAAP,KAAoBC,EAApB,KACA,EAAgChE,oBAAS,GAAzC,mBAAOiE,EAAP,KAAiBC,EAAjB,KACA,EAAkClE,mBAAS,eAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMN,EAASO,aAAY,SAAAR,GAAK,OAAIA,EAAMC,UAE1CU,qBAAU,WAEN,OAAO,WACHF,EHgED,CACHb,KAAM,iBG/DP,IAkBH,OACI,cAACpB,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,SAASC,UAAWiF,EAA5C,SACI,cAACrF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,GAAvB,SACI,eAAC3B,EAAA,EAAD,CAAOE,QAAQ,YAAYP,UAAWZ,EAAtC,UACI,cAACkB,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,KAAKE,MAAM,SAAST,UAAWZ,EAAlE,wBAGA,eAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,SACI,uBACIC,YAAU,EACVC,aAAa,MACbC,SA5BP,SAAAC,GACjBA,EAAEC,iBAEEM,GAAwB,IAAhBA,EAAK+C,OAGbL,GAAa,GAFbA,GAAa,GAIbC,GAAsC,IAAvBA,EAAYI,OAG3BD,GAAY,GAFZA,GAAY,GAIhB5D,EHFD,SAAiBH,EAAW4D,EAAa3C,GAC5C,8CAAO,WAAed,EAAUS,GAAzB,uBAAAqC,EAAA,6DACH9C,EAASf,GAAa,IADnB,kBAImByB,IAAMC,KAAN,UAtDqB,GAsDrB,aAA8B,CAACd,YAAW4D,cAAa3C,SAJ1E,OAIOD,EAJP,SAKkCA,EAAIC,KAA9BgD,EALR,EAKQA,cAAeC,EALvB,EAKuBA,IAAKC,EAL5B,EAK4BA,GAE3BhE,EAAS,CACLb,KAAM,UACN8E,QAAS,CACLH,gBACAC,MACAC,KACAnE,eAIRG,EAASf,GAAa,IAjBvB,kDAmBCe,EAASf,GAAa,IAnBvB,0DAAP,wDGCagF,CAAQpE,EAAW4D,EAAa3C,KAYrB,UAII,8BACI,cAACO,EAAA,EAAD,CACIE,MAAM,OACND,GAAG,OACHG,MAAOX,EACPY,SAAU,SAAAnB,GAAC,OAAI+C,EAAQ/C,EAAEoB,OAAOF,QAChCW,WAAS,EACTC,KAAM,EACN6B,MAAOX,EACP/B,WAAS,MAEjB,8BACI,cAACH,EAAA,EAAD,CACIE,MAAM,eACND,GAAG,cACHG,MAAOgC,EACP/B,SAAU,SAAAnB,GAAC,OAAImD,EAAenD,EAAEoB,OAAOF,QACvCyC,MAAOP,EACPnC,WAAS,MAEjB,8BACI,eAACO,EAAA,EAAD,CACIC,QAAQ,YACRT,MAAM,YACND,GAAG,YACHG,MAAO5B,EACP6B,SAAU,SAAAnB,GAAC,OAAIT,EAAaS,EAAEoB,OAAOF,QACrCD,WAAS,EACTrD,UAAWgF,EAPf,UASI,cAAClB,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,8BAGR,cAAC3C,EAAA,EAAD,CAAQK,KAAK,SAAStB,MAAM,UAAUa,QAAQ,YAAYP,UAAS,UAAKiF,EAAL,YAAYxF,GAA/E,mCAGR,eAACG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,UACI,cAACkB,EAAA,EAAD,CACI3C,QAAQ,WACR6C,MAAM,YACNW,aAAa,YACbT,MAAOjC,EAAOyE,QAAQpE,UACtBsC,UAAQ,EACRX,WAAS,IACb,cAACH,EAAA,EAAD,CACIlD,UAAWgF,EACXzE,QAAQ,WACR6C,MAAM,iBACNW,aAAa,iBACbT,MAAOjC,EAAOyE,QAAQH,cACtB1B,WAAS,EACTZ,WAAS,EACTa,KAAM,EACNF,UAAQ,IACZ,cAACd,EAAA,EAAD,CACIlD,UAAWgF,EACXzE,QAAQ,WACR6C,MAAM,MACNW,aAAa,MACbT,MAAOjC,EAAOyE,QAAQF,IACtB3B,WAAS,EACTZ,WAAS,EACTa,KAAM,EACNF,UAAQ,IACZ,cAACd,EAAA,EAAD,CACIlD,UAAWgF,EACXzE,QAAQ,WACR6C,MAAM,KACNW,aAAa,KACbT,MAAOjC,EAAOyE,QAAQD,GACtB5B,WAAS,EACTZ,WAAS,EACTa,KAAM,EACNF,UAAQ,kBC/IlC/E,EAAYC,aAAW,SAAAC,GAAM,MAAK,CACpC6F,IAAI,CACAxF,UAAWL,EAAOW,QAAQ,IAE9BmF,IAAI,CACAzF,UAAWL,EAAOW,QAAQ,IAE9BV,UAAU,CACNC,QAASF,EAAOW,QAAQ,IAE5BL,WAAW,CACPC,MAAO,YAiIAsG,EA7HC,WACZ,MAA0C/G,IAAnC+F,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,IAAK7F,EAAjB,EAAiBA,UAAWK,EAA5B,EAA4BA,WAEtBoC,EAAWC,cAEjB,EAA0CP,mBAAS,IAAnD,mBAAOoE,EAAP,KAAsBM,EAAtB,KACA,EAAsB1E,mBAAS,IAA/B,mBAAOqE,EAAP,KAAYM,EAAZ,KACA,EAAoB3E,mBAAS,IAA7B,mBAAOsE,EAAP,KAAWM,EAAX,KACA,EAAkC5E,mBAAS,eAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMN,EAASO,aAAY,SAAAR,GAAK,OAAIA,EAAMC,UAQ1C,OACI,8BACI,cAACzB,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAQ,SAASC,UAAWgF,EAA5C,SACI,cAACpF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,GAAvB,SACI,eAAC3B,EAAA,EAAD,CAAOE,QAAQ,YAAYP,UAAWZ,EAAtC,UACI,cAACkB,EAAA,EAAD,CACIN,UAAWZ,EACXqB,MAAM,SACND,UAAU,KACVD,QAAQ,KAJZ,qBAOA,eAACX,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,SACI,uBAAMC,YAAU,EAACE,SApBxB,SAAAC,GACjBA,EAAEC,iBAEFR,EJyCD,SAAiBH,EAAWkE,EAAKC,EAAIF,GACxC,8CAAO,WAAe9D,EAAUS,GAAzB,iBAAAqC,EAAA,6DACH9C,EAASf,GAAa,IADnB,kBAImByB,IAAMC,KAAN,UA/EqB,GA+ErB,eAAgC,CAACd,YAAWkE,MAAKC,KAAIF,kBAJxE,OAIOjD,EAJP,OAKS0D,EAAkB1D,EAAIC,KAAtByD,cAERvE,EAAS,CACLb,KAAM,UACNqF,QAAQ,CACJD,gBACAR,MACAC,QAGRhE,EAASf,GAAa,IAfvB,kDAiBCe,EAASf,GAAa,IAjBvB,0DAAP,wDI1CauF,CAAQ3E,EAAWkE,EAAKC,EAAIF,KAiBb,UACI,cAACzC,EAAA,EAAD,CACIC,GAAG,gBACH5C,QAAQ,WACR6C,MAAM,iBACNC,WAAS,EACTY,WAAS,EACTC,KAAM,EACNZ,MAAOqC,EACPpC,SAAU,SAAAnB,GAAC,OAAI6D,EAAiB7D,EAAEoB,OAAOF,UAE7C,cAACJ,EAAA,EAAD,CACIC,GAAG,MACH5C,QAAQ,WACR6C,MAAM,MACNC,WAAS,EACTC,MAAOsC,EACPrC,SAAU,SAAAnB,GAAC,OAAI8D,EAAO9D,EAAEoB,OAAOF,UAEnC,cAACJ,EAAA,EAAD,CACIC,GAAG,KACH5C,QAAQ,WACR6C,MAAM,KACNC,WAAS,EACTC,MAAOuC,EACPtC,SAAU,SAAAnB,GAAC,OAAI+D,EAAM/D,EAAEoB,OAAOF,UAElC,eAACM,EAAA,EAAD,CACIC,QAAQ,YACRT,MAAM,YACND,GAAG,YACHG,MAAO5B,EACP6B,SAAU,SAAAnB,GAAC,OAAIT,EAAaS,EAAEoB,OAAOF,QACrCD,WAAS,EACTrD,UAAWgF,EAPf,UASI,cAAClB,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,yBACA,cAACQ,EAAA,EAAD,CAAUR,MAAM,cAAhB,4BAEJ,cAAC3C,EAAA,EAAD,CAAQK,KAAK,SAAStB,MAAM,UAAUa,QAAQ,YAAYP,UAAS,UAAKiF,EAAL,YAAYxF,GAA/E,mCAIR,eAACG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI8B,GAAI,EAAvB,UACI,cAACkB,EAAA,EAAD,CACIC,GAAG,gBACHC,MAAM,iBACN7C,QAAQ,WACRwD,aAAa,iBACbT,MAAOjC,EAAOgF,QAAQD,cACtBlC,KAAM,EACND,WAAS,EACTD,UAAQ,EACRX,WAAS,IAEb,cAACH,EAAA,EAAD,CACIlD,UAAWgF,EACX7B,GAAG,MACHC,MAAM,MACN7C,QAAQ,WACRwD,aAAa,MACbT,MAAOjC,EAAOgF,QAAQT,IACtB1B,KAAM,EACND,WAAS,EACTD,UAAQ,EACRX,WAAS,IAEb,cAACH,EAAA,EAAD,CACIlD,UAAWgF,EACX7B,GAAG,KACHC,MAAM,KACN7C,QAAQ,WACRwD,aAAa,KACbT,MAAOjC,EAAOgF,QAAQR,GACtB3B,KAAM,EACND,WAAS,EACTD,UAAQ,EACRX,WAAS,oB,0HC7HvCpE,GAAYC,aAAW,SAAAoH,GAAK,MAAK,CACnCC,UAAW,CACP7G,MAAO,YAIf,SAAS8G,GAAgBC,GACvB,IAAQC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OAIZC,EAAUC,aAAiB,CAC/BC,mBAAmB,EACnBC,UAAW,EACXvD,OAAQmD,EAASA,SAAWK,IAG9B,OAAOC,IAAMC,aAAaR,EAAU,CAClCS,UAAWP,EAAU,EAAI,IAad,SAASQ,GAAcX,GAClC,IAAOF,EAAatH,KAAbsH,UACT,OACE,eAAC,IAAMc,SAAP,WACE,cAACC,EAAA,EAAD,IACA,cAACd,GAAD,2BAAqBC,GAArB,aACE,cAACc,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAClH,EAAA,EAAD,CAAYC,QAAQ,KAAKP,UAAWuG,EAApC,yCAIN,cAACiB,EAAA,EAAD,O,qEClDAC,GAAqB,CACvB1G,SAAS,EACT+B,KAAM,GACNgC,OAAQ,GACRgB,QAAS,GACTO,QAAS,ICJEqB,8BAAgB,CAC3BrG,ODMW,WAA6C,IAApCD,EAAmC,uDAA3BqG,GAAoBE,EAAO,uCACvD,OAAOA,EAAO3G,MACV,IAAK,OACD,kCACOI,GADP,IAEI0B,KAAM6E,EAAO7E,KACb/B,QAAS4G,EAAO5G,UAExB,IAAK,SACD,kCACOK,GADP,IAEI0D,OAAQ6C,EAAO7C,SAEvB,IAAK,UACD,kCACO1D,GADP,IAEI0E,QAAQ6B,EAAO7B,UAEvB,IAAK,UACD,kCACO1E,GADP,IAEIiF,QAASsB,EAAOtB,UAExB,IAAK,YACD,kCACOjF,GADP,IAEI0B,KAAK,GACLgC,OAAQ,GACRgB,QAAS,GACTO,QAAS,KAEjB,IAAK,UACD,kCACOjF,GADP,IAEIL,QAAS4G,EAAO5G,UAExB,QACI,OAAOK,ME1CbwG,GAAc,CAACC,MAEfC,GAAmBC,+BAAoBC,mBAAe,WAAf,EAAmBJ,KAEjDK,0BACPC,GACAJ,ICUFK,GAAcC,aAAe,CACjCC,QAAQ,CACNC,QAASC,KACTC,KAAM,CACJF,QAAS,SAGbG,WAAW,CACTC,WAAY,oBAKVzJ,GAAYC,aAAW,SAAAoH,GAAK,MAAK,CACrCqC,YAAa,CACTC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBtJ,UAAW,QA6EFuJ,OAzEf,WACE,IAAMC,EAAU/J,KAEhB,OACE,cAAC,IAAD,CAAegK,MAAOA,GAAtB,SACE,cAACC,GAAA,EAAD,CAAe5C,MAAO6B,GAAtB,SACA,cAACgB,EAAA,EAAD,CAAWnJ,UAAU,MAArB,SACE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,eAACoJ,EAAA,EAAD,CAAapJ,UAAWgJ,EAAQL,YAAhC,UACQ,cAAChI,EAAA,EAAD,CACEK,KAAK,SACLtB,MAAM,YACNa,QAAQ,WACRC,UAAWI,IACXC,GAAI,IALN,kBASA,cAACF,EAAA,EAAD,CACIK,KAAK,SACLtB,MAAM,YACNa,QAAQ,WACR8I,UAAW,cAAC,IAAD,CAAiBC,SAAS,QAAQ5J,MAAM,cACnDc,UAAWI,IACXC,GAAI,QANR,kBAUA,cAACF,EAAA,EAAD,CACIK,KAAK,SACLtB,MAAM,YACNa,QAAQ,WACR8I,UAAW,cAAC,IAAD,CAAkBC,SAAS,QAAQ5J,MAAM,cACpDc,UAAWI,IACXC,GAAI,UANR,oBASA,cAACF,EAAA,EAAD,CACIK,KAAK,SACLtB,MAAM,YACNa,QAAQ,WACR8I,UAAW,cAAC,IAAD,CAAUC,SAAS,QAAQ5J,MAAM,cAC5Cc,UAAWI,IACXC,GAAI,WANR,qBASA,cAACF,EAAA,EAAD,CACIK,KAAK,SACLtB,MAAM,YACNa,QAAQ,WACR8I,UAAW,cAAC,IAAD,CAAcC,SAAS,QAAQ5J,MAAM,cAChDc,UAAWI,IACXC,GAAI,WANR,wBAWR,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0I,KAAK,IAAI/I,UAAWb,EAAM6J,OAAK,IACtC,cAAC,IAAD,CAAOD,KAAK,QAAQ/I,UAAWc,EAAMkI,OAAK,IAC1C,cAAC,IAAD,CAAOD,KAAK,UAAU/I,UAAW2D,EAAQqF,OAAK,IAC9C,cAAC,IAAD,CAAOD,KAAK,WAAW/I,UAAW0E,EAASsE,OAAK,IAChD,cAAC,IAAD,CAAOD,KAAK,WAAW/I,UAAWwF,EAASwD,OAAK,iBC9F7CC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlH,MAAK,YAAkD,IAA/CmH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OAEL,cAAC,GAAD,IAEDC,SAASC,eAAe,SAM3BX,O","file":"static/js/main.c53fe240.chunk.js","sourcesContent":["import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Button, makeStyles } from '@material-ui/core'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles(styles => ({\r\n    smPadding:{\r\n        padding:'10px'\r\n    },\r\n    mdPadding:{\r\n        padding:'20px'\r\n    },\r\n    mt: {\r\n        marginTop: '20px'\r\n    },\r\n    colorWhite:{\r\n        color: '#fff'\r\n    }\r\n}));\r\n\r\nconst Home = () => {\r\n    const {smPadding, mdPadding, mt, colorWhite} = useStyles();\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\" className={mt}>\r\n            <Grid item xs={12} md={8} xl={12}>\r\n                <Paper className={mdPadding}>\r\n                    <Typography \r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                        align=\"center\"\r\n                        className={mdPadding}\r\n                        gutterBottom>\r\n                        Home\r\n                    </Typography>\r\n                    <Typography>\r\n                        Cryptography is an important part of any back-end structure. whether you are authorizing an incoming request to store or read data or giving authentication to a user.\r\n                        Nodejs at its core include a module called Crypto. There are plenty of hashing and cryptographical options ready to use. Althoough many may use 3rd party libraries such as bcrypt and aragon2, the Crypto module can make the most out of the job. \r\n                        In this project we are gonna showcase number of important and commonly used ones which could be useful in many cases and the input and output of procedure as an visual HTML form, would help learn the concept better.\r\n                    </Typography>\r\n                    <Button color=\"primary\" variant=\"contained\" className={`${mt} ${colorWhite}`} component={NavLink} to={\"/hash\"}>Go for Hashing</Button>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import axios from 'axios'\r\n\r\nconst url = process.env.NODE_ENV == 'production' ? '' : 'http://localhost:4000';\r\n\r\nexport function createHMAC (str, algorithm){\r\n    return function(dispatch, getState){\r\n        dispatch(toggleLoader(true));\r\n        \r\n        axios.post(`${url}/hash`, {str, algorithm})\r\n            .then(res => {\r\n                const {hash, algorithm, plainText} = res.data;\r\n                dispatch({\r\n                    type: 'HMAC',\r\n                    hmac:{\r\n                        hash,\r\n                        algorithm,\r\n                        plainText\r\n                    }\r\n                });\r\n                dispatch(toggleLoader(false));\r\n            })\r\n            .catch(err=> {\r\n                \r\n                dispatch(toggleLoader(false));\r\n            });\r\n    };\r\n};\r\n\r\nexport function pbkdf2(password, iterations, keylen, algorithm){\r\n    return async function(dispatch, getState){\r\n        dispatch(toggleLoader(true));\r\n\r\n        try {\r\n            const res = await axios.post(`${url}/pbkdf2`, {password, iterations, keylen, algorithm});\r\n            const {pbkdf2Password, salt} = res.data;\r\n            dispatch({\r\n                type: 'PBKDF2',\r\n                pbkdf2:{\r\n                    pbkdf2Password,\r\n                    salt\r\n                }\r\n            });\r\n\r\n            dispatch(toggleLoader(false));\r\n        } catch (err) {\r\n            dispatch(toggleLoader(false));\r\n        }\r\n\r\n    };\r\n};\r\n\r\nexport function encrypt(algorithm, keyPassword, data){\r\n    return async function(dispatch, getState){\r\n        dispatch(toggleLoader(true));\r\n\r\n        try {\r\n            const res = await axios.post(`${url}/cipheriv`, {algorithm, keyPassword, data});\r\n            const {encryptedData, key, iv} = res.data\r\n            \r\n            dispatch({\r\n                type: 'ENCRYPT',\r\n                encrypt: {\r\n                    encryptedData,\r\n                    key,\r\n                    iv,\r\n                    algorithm\r\n                }\r\n            });\r\n\r\n            dispatch(toggleLoader(false));\r\n        } catch (err) {\r\n            dispatch(toggleLoader(false));\r\n        }\r\n    }\r\n};\r\n\r\nexport function decrypt(algorithm, key, iv, encryptedData){\r\n    return async function(dispatch, getState){\r\n        dispatch(toggleLoader(true));\r\n\r\n        try {\r\n            const res = await axios.post(`${url}/decipheriv`, {algorithm, key, iv, encryptedData});\r\n            const { decryptedData } = res.data;\r\n\r\n            dispatch({\r\n                type: 'DECRYPT',\r\n                decrypt:{\r\n                    decryptedData,\r\n                    key,\r\n                    iv\r\n                }\r\n            });\r\n            dispatch(toggleLoader(false));\r\n        } catch (err) {\r\n            dispatch(toggleLoader(false));\r\n        }\r\n    };\r\n};\r\n\r\nexport function clearAll(){\r\n    return {\r\n        type: 'CLEAR_ALL'\r\n    };\r\n};\r\n\r\nexport function toggleLoader(loading){\r\n    return {\r\n        type: 'LOADING',\r\n        loading\r\n    };\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Grid, Paper, Typography, makeStyles, TextField, Button, Select, MenuItem, FormControl, InputLabel} from '@material-ui/core'\r\nimport { clearAll, createHMAC } from '../state/actions/cryptoActions';\r\n\r\nconst useStyles = makeStyles(styles => ({\r\n    smPadding:{\r\n        padding:'10px'\r\n    },\r\n    mdPadding:{\r\n        padding:'20px'\r\n    },\r\n    mt: {\r\n        marginTop: '20px'\r\n    },\r\n    colorWhite:{\r\n        color: '#fff'\r\n    },\r\n    selectMinWidth:{\r\n        minWidth: 120\r\n    }\r\n}));\r\n\r\nconst cryptoSelector = state => state.crypto;\r\n\r\nconst Hash = () => {\r\n    const {mdPadding, mt, colorWhite, selectMinWidth} = useStyles();\r\n    \r\n    // Component states\r\n    const [str, setStr] = useState('');\r\n    const [algorithm, setAlgorithm] = useState('SHA1');\r\n\r\n    // Redux state selector\r\n    const crypto = useSelector(cryptoSelector);\r\n\r\n    // Dispatcher\r\n    const dispatch = useDispatch();\r\n\r\n    const textChangehanlder = e => setStr(e.target.value);\r\n    const algorithmChangeHanlder = e => setAlgorithm(e.target.value);\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        dispatch(createHMAC(str, algorithm));\r\n    };\r\n\r\n    useEffect(\r\n        ()=>{\r\n\r\n            return () => {\r\n                dispatch(clearAll());\r\n            };\r\n        }\r\n    ,[]);\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\" className={mt}>\r\n            <Grid item xs={12} md={10} xl={12}>\r\n                <Paper className={mdPadding}>\r\n                    <Typography component=\"h2\" variant=\"h5\" className={mdPadding} align=\"center\">\r\n                        Hash\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                        <form noValidate autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n                            <div>\r\n                                <TextField \r\n                                    id=\"str\" \r\n                                    label=\"Plain text\" \r\n                                    fullWidth\r\n                                    value={str}\r\n                                    onChange={textChangehanlder}\r\n                                />\r\n                            </div>\r\n                            <FormControl className={mt}>\r\n                                <InputLabel htmlFor=\"algorithm\">Algorithm</InputLabel>\r\n                                <Select\r\n                                    id=\"algorithm\"\r\n                                    labelId=\"algorithm\"\r\n                                    label=\"algorithm\"\r\n                                    fullWidth\r\n                                    className={selectMinWidth}\r\n                                    value={algorithm}\r\n                                    onChange={algorithmChangeHanlder}\r\n                                >\r\n                                    <MenuItem value=\"SHA1\">SHA1</MenuItem>\r\n                                    <MenuItem value=\"SHA256\">SHA256</MenuItem>\r\n                                    <MenuItem value=\"SHA384\">SHA384</MenuItem>\r\n                                    <MenuItem value=\"SHA512\">SHA512</MenuItem>\r\n                                </Select>\r\n                                {/* <TextField id=\"algorithm\" label=\"algorithm\" fullWidth/> */}\r\n                            </FormControl>\r\n                            <div>\r\n                                <Button type=\"submit\" color=\"primary\" variant=\"contained\" className={`${mt} ${colorWhite}`}>Generate Hash</Button>\r\n                            </div>\r\n                        </form>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label=\"Plain text\"\r\n                                defaultValue=\"Plain text\"\r\n                                value={crypto.hmac && crypto.hmac.plainText}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                disabled\r\n                                multiline\r\n                                rows={2}\r\n                            />\r\n                            <TextField\r\n                                label=\"Algorithm\"\r\n                                defaultValue=\"Algorithm\"\r\n                                variant=\"outlined\"\r\n                                value={crypto.hmac && crypto.hmac.algorithm}\r\n                                className={mt}\r\n                                disabled\r\n                            />\r\n                            <TextField\r\n                                disabled\r\n                                id=\"outlined-disabled\"\r\n                                label=\"Output\"\r\n                                defaultValue='Hashed output'\r\n                                variant=\"outlined\"\r\n                                value={crypto.hmac && crypto.hmac.hash}\r\n                                fullWidth\r\n                                multiline\r\n                                rows={10}\r\n                                className={mt}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Hash\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Grid, makeStyles, Paper, Typography, FormControl, TextField, InputLabel, Select, MenuItem, Button } from '@material-ui/core'\r\nimport { clearAll, pbkdf2 } from '../state/actions/cryptoActions';\r\n\r\nconst useStyles = makeStyles(styles => ({\r\n    smPadding:{\r\n        padding:'10px'\r\n    },\r\n    mdPadding:{\r\n        padding:'20px'\r\n    },\r\n    mt: {\r\n        marginTop: '20px'\r\n    },\r\n    colorWhite:{\r\n        color: '#fff'\r\n    },\r\n    selectMinWidth:{\r\n        minWidth: 120\r\n    }\r\n}));\r\n\r\nconst cryptoSelector = state => state.crypto;\r\n\r\nconst Pbkdf2 = () => {\r\n    const {mt, smPadding, mdPadding, selectMinWidth, colorWhite} = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [plainPassword, setPlainPassword] = useState('');\r\n    const [iterations, setIterations] = useState(0);\r\n    const [keylen, setKeylen] = useState(0);\r\n    const [algorithm, setAlgorithm] = useState('SHA1');\r\n\r\n    const crypto = useSelector(cryptoSelector);\r\n\r\n    useEffect(() => {\r\n        \r\n        return () => {\r\n            dispatch(clearAll());\r\n        }\r\n    }, []);\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        dispatch(pbkdf2(plainPassword, iterations, keylen, algorithm));\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\" className={mt}>\r\n            <Grid item xs={12} sm={10} xl={12}>\r\n                <Paper className={mdPadding}>\r\n                    <Typography\r\n                        component=\"h2\"\r\n                        variant=\"h6\"\r\n                        align=\"center\"\r\n                        gutterBottom\r\n                        className={mdPadding}\r\n                    >\r\n                        Password key derivation function 2 (PBKDF2)\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <form autoComplete=\"off\" onSubmit={handleFormSubmit} noValidate>\r\n                                <div>\r\n                                    <TextField id=\"password\" label=\"Plain Password\" fullWidth onChange={e=> setPlainPassword(e.target.value)} value={plainPassword}/>\r\n                                </div>\r\n                                <div>\r\n                                    <TextField type=\"number\" id=\"iterations\" label=\"Iterations\" fullWidth onChange={e => setIterations(Number(e.target.value))} value={iterations}/>\r\n                                </div>\r\n                                <div>\r\n                                    <TextField type=\"number\" id=\"keylen\" label=\"Keylen\" fullWidth onChange={e => setKeylen(Number(e.target.value))} value={keylen}/>\r\n                                </div>\r\n                                <div>\r\n                                    <FormControl className={mt}>\r\n                                        <InputLabel id=\"algorithm\">Algorithm</InputLabel>\r\n                                        <Select\r\n                                            id=\"str\"\r\n                                            labelId=\"algorithm\"\r\n                                            label=\"algorithm\"\r\n                                            fullWidth\r\n                                            className={selectMinWidth}\r\n                                            value={algorithm}\r\n                                            onChange={e => setAlgorithm(e.target.value)}\r\n                                        >\r\n                                            <MenuItem value=\"SHA1\">SHA1</MenuItem>\r\n                                            <MenuItem value=\"SHA256\">SHA256</MenuItem>\r\n                                            <MenuItem value=\"SHA384\">SHA384</MenuItem>\r\n                                            <MenuItem value=\"SHA512\">SHA512</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div>\r\n                                    <Button type=\"submit\" color=\"primary\" variant=\"contained\" className={`${mt} ${colorWhite}`}>Generate PBKDF2</Button>\r\n                                </div>\r\n                            </form>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                disabled\r\n                                variant=\"outlined\"\r\n                                label=\"Salt\"\r\n                                defaultValue=\"Salt\"\r\n                                fullWidth\r\n                                multiline\r\n                                rows={4}\r\n                                value={crypto.pbkdf2.salt}\r\n                            />\r\n                            <TextField \r\n                                className={mt}\r\n                                disabled\r\n                                label=\"Password Hash\"\r\n                                defaultValue=\"Password Hash\" \r\n                                variant=\"outlined\"\r\n                                value={crypto.pbkdf2.pbkdf2Password}\r\n                                multiline\r\n                                fullWidth\r\n                                rows={10}\r\n                                />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Pbkdf2\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Grid, Paper, Typography, TextField, makeStyles, Button, Select, MenuItem, FormControl,  } from '@material-ui/core'\r\nimport { clearAll, encrypt } from '../state/actions/cryptoActions'\r\n\r\nconst useStyles = makeStyles(styles => ({\r\n    mt1:{\r\n        marginTop: styles.spacing(3)\r\n    },\r\n    mt2:{\r\n        marginTop: styles.spacing(4)\r\n    },\r\n    smPadding:{\r\n        padding: styles.spacing(3)\r\n    },\r\n    colorWhite:{\r\n        color: '#fff'\r\n    }\r\n}))\r\n\r\nconst Encrypt = () => {\r\n    const {mt1, mt2, smPadding, colorWhite} = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [data, setData] = useState('');\r\n    const [dataError, setDataError] = useState(false);\r\n    const [keyPassword, setKeyPassword] = useState('');\r\n    const [keyError, setKeyError] = useState(false);\r\n    const [algorithm, setAlgorithm] = useState('aes-128-ccm');\r\n\r\n    const crypto = useSelector(state => state.crypto);\r\n\r\n    useEffect(() => {\r\n        \r\n        return () => {\r\n            dispatch(clearAll());\r\n        }\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if(!data || data.length === 0)\r\n            setDataError(true);\r\n        else\r\n            setDataError(false);\r\n\r\n        if(!keyPassword || keyPassword.length === 0)\r\n            setKeyError(true);\r\n        else\r\n            setKeyError(false);\r\n\r\n        dispatch(encrypt(algorithm, keyPassword, data));\r\n    };\r\n\r\n    return (\r\n        <Grid container justify=\"center\" className={mt2}>\r\n            <Grid item xs={12} sm={10}>\r\n                <Paper variant=\"elevation\" className={smPadding}>\r\n                    <Typography component=\"h2\" variant=\"h6\" align=\"center\" className={smPadding}> \r\n                        Encryption\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <form \r\n                                noValidate \r\n                                autoComplete=\"off\"\r\n                                onSubmit={handleSubmit}>\r\n                                <div>\r\n                                    <TextField \r\n                                        label=\"Data\" \r\n                                        id=\"data\" \r\n                                        value={data}\r\n                                        onChange={e => setData(e.target.value)}\r\n                                        multiline\r\n                                        rows={5}\r\n                                        error={dataError}\r\n                                        fullWidth/>\r\n                                </div>\r\n                                <div>\r\n                                    <TextField \r\n                                        label=\"Key Password\" \r\n                                        id=\"keyPassword\" \r\n                                        value={keyPassword}\r\n                                        onChange={e => setKeyPassword(e.target.value)}\r\n                                        error={keyError}\r\n                                        fullWidth/>\r\n                                </div>\r\n                                <div>\r\n                                    <Select\r\n                                        labelId=\"algorithm\"\r\n                                        label=\"algorithm\"\r\n                                        id=\"algorithm\"\r\n                                        value={algorithm}\r\n                                        onChange={e => setAlgorithm(e.target.value)}\r\n                                        fullWidth\r\n                                        className={mt1}\r\n                                    >\r\n                                        <MenuItem value=\"aes-128-ccm\">aes-128-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-128-gcm\">aes-128-gcm</MenuItem>\r\n                                        <MenuItem value=\"aes-192-ccm\">aes-192-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-192-gcm\">aes-192-gcm</MenuItem>\r\n                                        <MenuItem value=\"aes-256-cbc\">aes-256-cbc</MenuItem>\r\n                                        <MenuItem value=\"aes-256-ccm\">aes-256-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-256-gcm\">aes-256-gcm</MenuItem>\r\n                                    </Select>\r\n                                </div>\r\n                                <Button type=\"submit\" color=\"primary\" variant=\"contained\" className={`${mt2} ${colorWhite}`}>Encrypt the Data</Button>\r\n                            </form>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                label=\"Algorithm\"\r\n                                defaultValue=\"Algorithm\"\r\n                                value={crypto.encrypt.algorithm}\r\n                                disabled\r\n                                fullWidth/>\r\n                            <TextField \r\n                                className={mt1}\r\n                                variant=\"outlined\" \r\n                                label=\"Encrypted Data\"\r\n                                defaultValue=\"Encrypted Data\"\r\n                                value={crypto.encrypt.encryptedData}\r\n                                multiline\r\n                                fullWidth\r\n                                rows={6} \r\n                                disabled/>\r\n                            <TextField \r\n                                className={mt1}\r\n                                variant=\"outlined\" \r\n                                label=\"Key\"\r\n                                defaultValue=\"Key\"\r\n                                value={crypto.encrypt.key}\r\n                                multiline\r\n                                fullWidth\r\n                                rows={4} \r\n                                disabled/>\r\n                            <TextField \r\n                                className={mt1}\r\n                                variant=\"outlined\" \r\n                                label=\"iv\"\r\n                                defaultValue=\"iv\"\r\n                                value={crypto.encrypt.iv}\r\n                                multiline\r\n                                fullWidth\r\n                                rows={4} \r\n                                disabled/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Encrypt\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Grid, Typography, Paper, TextField, makeStyles, MenuItem, Select, Button } from '@material-ui/core'\r\nimport { decrypt } from '../state/actions/cryptoActions';\r\n\r\nconst useStyles = makeStyles(styles => ({\r\n    mt1:{\r\n        marginTop: styles.spacing(3)\r\n    },\r\n    mt2:{\r\n        marginTop: styles.spacing(4)\r\n    },\r\n    smPadding:{\r\n        padding: styles.spacing(3)\r\n    },\r\n    colorWhite:{\r\n        color: '#fff'\r\n    }\r\n}));\r\n\r\nconst Decrypt = () => {\r\n    const {mt1, mt2, smPadding, colorWhite} = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [encryptedData, setEncryptedData] = useState('');\r\n    const [key, setKey] = useState('');\r\n    const [iv, setIv] = useState('');\r\n    const [algorithm, setAlgorithm] = useState('aes-128-ccm');\r\n\r\n    const crypto = useSelector(state => state.crypto);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        dispatch(decrypt(algorithm, key, iv, encryptedData));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justify=\"center\" className={mt1}>\r\n                <Grid item xs={12} sm={10}>\r\n                    <Paper variant=\"elevation\" className={smPadding}>\r\n                        <Typography\r\n                            className={smPadding}\r\n                            align=\"center\"\r\n                            component=\"h2\"\r\n                            variant=\"h6\">\r\n                            Decrypt\r\n                        </Typography>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <form noValidate onSubmit={handleSubmit}>\r\n                                    <TextField\r\n                                        id=\"encryptedData\"\r\n                                        variant=\"standard\"\r\n                                        label=\"Encrypted Data\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={5}\r\n                                        value={encryptedData}\r\n                                        onChange={e => setEncryptedData(e.target.value)}\r\n                                    />\r\n                                    <TextField\r\n                                        id=\"key\"\r\n                                        variant=\"standard\"\r\n                                        label=\"Key\"\r\n                                        fullWidth\r\n                                        value={key}\r\n                                        onChange={e => setKey(e.target.value)}\r\n                                    />\r\n                                    <TextField\r\n                                        id=\"iv\"\r\n                                        variant=\"standard\"\r\n                                        label=\"iv\"\r\n                                        fullWidth\r\n                                        value={iv}\r\n                                        onChange={e => setIv(e.target.value)}\r\n                                    />\r\n                                    <Select\r\n                                        labelId=\"algorithm\"\r\n                                        label=\"algorithm\"\r\n                                        id=\"algorithm\"\r\n                                        value={algorithm}\r\n                                        onChange={e => setAlgorithm(e.target.value)}\r\n                                        fullWidth\r\n                                        className={mt1}\r\n                                    >\r\n                                        <MenuItem value=\"aes-128-ccm\">aes-128-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-128-gcm\">aes-128-gcm</MenuItem>\r\n                                        <MenuItem value=\"aes-192-ccm\">aes-192-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-192-gcm\">aes-192-gcm</MenuItem>\r\n                                        <MenuItem value=\"aes-256-cbc\">aes-256-cbc</MenuItem>\r\n                                        <MenuItem value=\"aes-256-ccm\">aes-256-ccm</MenuItem>\r\n                                        <MenuItem value=\"aes-256-gcm\">aes-256-gcm</MenuItem>\r\n                                    </Select>\r\n                                    <Button type=\"submit\" color=\"primary\" variant=\"contained\" className={`${mt2} ${colorWhite}`}>Encrypt the Data</Button>\r\n                                </form>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    id=\"decryptedData\"\r\n                                    label=\"Decrypted Data\"\r\n                                    variant=\"outlined\"\r\n                                    defaultValue=\"Decrypted Data\"\r\n                                    value={crypto.decrypt.decryptedData}\r\n                                    rows={6}\r\n                                    multiline\r\n                                    disabled\r\n                                    fullWidth\r\n                                />\r\n                                <TextField\r\n                                    className={mt1}\r\n                                    id=\"key\"\r\n                                    label=\"Key\"\r\n                                    variant=\"outlined\"\r\n                                    defaultValue=\"Key\"\r\n                                    value={crypto.decrypt.key}\r\n                                    rows={4}\r\n                                    multiline\r\n                                    disabled\r\n                                    fullWidth\r\n                                />\r\n                                <TextField\r\n                                    className={mt1}\r\n                                    id=\"iv\"\r\n                                    label=\"iv\"\r\n                                    variant=\"outlined\"\r\n                                    defaultValue=\"iv\"\r\n                                    value={crypto.decrypt.iv}\r\n                                    rows={3}\r\n                                    multiline\r\n                                    disabled\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Decrypt\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    whiteFont: {\r\n        color: '#fff'\r\n    }\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children, window } = props;\r\n  // Note that you normally won't need to set the window ref as useScrollTrigger\r\n  // will default to window.\r\n  // This is only being set here because the demo is in an iframe.\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n    target: window ? window() : undefined,\r\n  });\r\n\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default function ElevateAppBar(props) {\r\n    const {whiteFont} = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <ElevationScroll {...props}>\r\n        <AppBar>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={whiteFont}>Welcome to Hashmaker</Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <Toolbar />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n\r\nconst cryptoDefaultState = {\r\n    loading: false,\r\n    hmac: {},\r\n    pbkdf2: {},\r\n    encrypt: {},\r\n    decrypt: {}\r\n};\r\n\r\nexport default function(state = cryptoDefaultState, action){\r\n    switch(action.type){\r\n        case 'HMAC':\r\n            return{\r\n                ...state,\r\n                hmac: action.hmac,\r\n                loading: action.loading\r\n            };\r\n        case 'PBKDF2':\r\n            return{\r\n                ...state,\r\n                pbkdf2: action.pbkdf2\r\n            };\r\n        case 'ENCRYPT':\r\n            return{\r\n                ...state,\r\n                encrypt:action.encrypt\r\n            };\r\n        case 'DECRYPT':\r\n            return{\r\n                ...state,\r\n                decrypt: action.decrypt\r\n            };\r\n        case 'CLEAR_ALL':\r\n            return{\r\n                ...state,\r\n                hmac:{},\r\n                pbkdf2: {},\r\n                encrypt: {},\r\n                decrypt: {}\r\n            };\r\n        case 'LOADING':\r\n            return{\r\n                ...state,\r\n                loading: action.loading\r\n            };\r\n        default:\r\n            return state;\r\n        \r\n    }\r\n};","import { combineReducers } from 'redux'\r\nimport cryptoReducer from './cryptoReducer';\r\n\r\nexport default combineReducers({\r\n    crypto: cryptoReducer\r\n});","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport rootReducer from '../reducers/indexReducer'\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(...middlewares));\r\n\r\nexport default createStore(\r\n        rootReducer, \r\n        composedEnhancer\r\n    );","import { Switch, BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container'\r\nimport Home from './components/Home'\r\nimport Hash from './components/Hash'\r\nimport Pbkdf2 from './components/Pbkdf2'\r\nimport Encrypt from './components/Encrypt'\r\nimport Decrypt from './components/Decrypt'\r\nimport Button from '@material-ui/core/Button'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport BorderClearIcon from '@material-ui/icons/BorderClear';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport AppBar from './components/UI/ElevateAppBar'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core'\r\nimport { lightBlue } from '@material-ui/core/colors'\r\nimport { Provider as ReduxProvider } from 'react-redux'\r\nimport './styles/App.css'\r\nimport store from './state/store'\r\n\r\nconst customTheme = createMuiTheme({\r\n  palette:{\r\n    primary: lightBlue,\r\n    text: {\r\n      primary: '#666'\r\n    }\r\n  },\r\n  typography:{\r\n    fontFamily: 'Chelsea Market',\r\n\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  alignCenter: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'center',\r\n      marginTop: 20\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ReduxProvider store={store}>\r\n      <ThemeProvider theme={customTheme}>\r\n      <Container className=\"App\">\r\n        <Router>\r\n          <AppBar/>\r\n          <ButtonGroup className={classes.alignCenter}>\r\n                  <Button \r\n                    type=\"button\" \r\n                    color=\"secondary\" \r\n                    variant=\"outlined\"\r\n                    component={NavLink}\r\n                    to={'/'}\r\n                      >\r\n                      Home\r\n                    </Button>\r\n                  <Button \r\n                      type=\"button\" \r\n                      color=\"secondary\" \r\n                      variant=\"outlined\"\r\n                      startIcon={<BorderClearIcon fontSize=\"small\" color=\"secondary\"/>}\r\n                      component={NavLink}\r\n                      to={'/hash'}\r\n                      >\r\n                      Hash\r\n                  </Button>\r\n                  <Button \r\n                      type=\"button\" \r\n                      color=\"secondary\" \r\n                      variant=\"outlined\"\r\n                      startIcon={<TrackChangesIcon fontSize=\"small\" color=\"secondary\"/>}\r\n                      component={NavLink}\r\n                      to={'/pbkdf2'}>\r\n                      PBKDF2\r\n                  </Button>\r\n                  <Button \r\n                      type=\"button\" \r\n                      color=\"secondary\" \r\n                      variant=\"outlined\"\r\n                      startIcon={<LockIcon fontSize=\"small\" color=\"secondary\"/>}\r\n                      component={NavLink}\r\n                      to={'/encrypt'}>\r\n                          Encrypt\r\n                  </Button>\r\n                  <Button \r\n                      type=\"button\" \r\n                      color=\"secondary\" \r\n                      variant=\"outlined\"\r\n                      startIcon={<LockOpenIcon fontSize=\"small\" color=\"secondary\"/>}\r\n                      component={NavLink}\r\n                      to={'/decrypt'}>\r\n                          Decrypt\r\n                  </Button>\r\n\r\n              </ButtonGroup>\r\n          <Switch>\r\n            <Route path=\"/\" component={Home} exact/>\r\n            <Route path=\"/hash\" component={Hash} exact/>\r\n            <Route path=\"/pbkdf2\" component={Pbkdf2} exact/>\r\n            <Route path=\"/encrypt\" component={Encrypt} exact/>\r\n            <Route path=\"/decrypt\" component={Decrypt} exact/>\r\n          </Switch>\r\n        </Router>\r\n      </Container>\r\n    </ThemeProvider>\r\n    </ReduxProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}